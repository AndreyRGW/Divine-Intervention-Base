### Cultural Editor Window ###

window = {
	name = "DI_cultural_editor_window"
	layer = windows_layer
	using = Window_Size_Sidebar
	using = Window_Background_Sidebar
	movable = no	
	
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	datacontext = "[GetPlayer.MakeScope.Var('DI_innovation_selected_culture').Culture]"
	datacontext = "[Culture.GetReformation]"
	

	visible = "[And(GetVariableSystem.Exists('DI_cultural_editor_window_visible'), GetPlayer.MakeScope.Var('DI_innovation_selected_char').Char.IsValid)]"
	
	using = DI_Innovation_Anim
	
	vbox = {
		using = DI_Cultural_Editor_Header
		using = DI_Cultural_Select_Character
		
		widget = {
			layoutpolicy_horizontal = expanding
			size = { 0 48 }

			vbox = {
				name = "acceptance"
				# visible = "[Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) )]"
				spacing = 2
				margin_left = 450
				margin_right = 10

				text_single = {
					name = "acceptance_text"
					layoutpolicy_horizontal = expanding
					text = "CULTURE_VIEW_ACCEPTANCE"
					align = right
					autoresize = no
					tooltip = "CULTURE_ACCEPTANCE_TOOLTIP"
				}

				text_single = {
					visible = "[NotEqualTo_CFixedPoint( Culture.GetAcceptanceDiff( GetPlayer.GetCulture ), '(CFixedPoint)0')]"
					layoutpolicy_horizontal = expanding
					text = "CULTURE_VIEW_ACCEPTANCE_DIFF"
					align = right
					autoresize = no
					tooltip = "CULTURE_ACCEPTANCE_TOOLTIP"
				}

				expand = {}
			}

			hbox = {
				name = "whos_culture"
				margin_top = 5

				vbox = {
					layoutpolicy_vertical = expanding

					text_label_center = {
						text = "[Culture.GetPlayerRelationString]"
						default_format = "#low"
					}

					text_single = {
						text = "[Culture.GetCreationString]"
						max_width = 490
					}
				}
			}
		}

		hbox = {
			name = "tabs"
			layoutpolicy_horizontal = expanding
			margin_top = 10

			button_tab = {
				layoutpolicy_horizontal = expanding
				onclick = "[GetVariableSystem.Set( 'culture_view_tabs', 'overview' )]"
				onclick = "[GetVariableSystem.Set( 'reformation_mode', 'hide' )]"
				down = "[GetVariableSystem.HasValue( 'culture_view_tabs', 'overview' )]"

				text_single = {
					parentanchor = center
					text = "CULTURE_VIEW_OVERVIEW"
					maximumsize = { 400 -1 }
					default_format = "#low"
				}
			}

			button_tab = {
				name = "innovations_tab"
				layoutpolicy_horizontal = expanding
				onclick = "[GetVariableSystem.Set( 'culture_view_tabs', 'innovations' )]"
				onclick = "[GetVariableSystem.Set( 'reformation_mode', 'hide' )]"
				onclick = "[GetVariableSystem.Set('DI_culture_era_tab', 'tribal')]"
				down = "[GetVariableSystem.HasValue( 'culture_view_tabs', 'innovations' )]"

				text_single = {
					parentanchor = center
					text = "DI_innovation_selection_tab"
					maximumsize = { 400 -1 }
					default_format = "#low"
				}
			}
		}

		vbox = {
			name = "traditions_and_pillars_tab"
			visible = "[GetVariableSystem.HasValue( 'culture_view_tabs', 'overview' )]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = Animation_Tab_Switch

			DI_container_pillar_item = {
				datacontext = "[Culture.GetEthos]"

				blockoverride "icon_size" {
					size = { 400 100 }
				}

				button_round = {
					visible = "[GetVariableSystem.HasValue( 'reformation_mode', 'show' )]"
					parentanchor = bottom|right
					onclick = "[GetVariableSystem.Toggle( 'ethos_window_visible' )]"
					position = { -8 -8 }

					tooltip = "CULTURE_CLICK_TO_REPLACE"

					button_change = {
						alwaystransparent = yes
						parentanchor = center
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				text_label_left = {
					layoutpolicy_horizontal = expanding
					margin = { 10 6 }
					text = "[culture_pillars|E]"
					default_format = "#low"
					align = nobaseline
				}
			}

			hbox = {
				name = "cultural_pillars_block"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				maximumsize = { 594 104 }

				widget = {
					name = "cultural_pillars_collumn_one"
					layoutpolicy_horizontal = expanding

					vbox = {
						margin_left = 10

						hbox = {
							name = "heritage"
							datacontext = "[Culture.GetHeritage]"
							layoutpolicy_horizontal = expanding

							hbox = {
								spacing = 10

								tooltipwidget = {
									using = culture_pillar_tooltip
								}

								icon_doctrine = {
									visible = "[ObjectsEqual( Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage )]"
									size = { 44 44 }
									texture = "gfx/interface/icons/culture_pillars/heritage.dds"
								}

								icon_doctrine = {
									visible = "[Not( ObjectsEqual( Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage ))]"
									size = { 44 44 }
									texture = "gfx/interface/icons/culture_pillars/heritage_diverge.dds"
								}

								text_multi = {
									datacontext = "[Culture.GetHeritage]"
									text = "CULTURE_VIEW_HERITAGE_TEXT"
									autoresize = yes
									max_width = 220
								}
							}

							expand = {}
						}

						hbox = {
							name = "martial"
							datacontext = "[Culture.GetMartial]"
							layoutpolicy_horizontal = expanding

 							# Only show Martial if culture affects martial customs,
 							# which is only the case if we are able to modify
 							# the culture pillars.
							visible = "[HasDlcFeature( 'diverge_culture' )]"

							spacing = 10

							icon_doctrine = {
								size = { 44 44 }
								texture = "[CulturePillar.GetIcon]"
							}

							vbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding

									spacing = 5

									tooltipwidget = {
										using = culture_pillar_tooltip
									}

									text_multi = {
										text = "CULTURE_VIEW_MARTIAL_CUSTOM_TEXT"
										autoresize = yes
										max_width = 220
									}

									button_change = {
										visible = "[GetVariableSystem.HasValue( 'reformation_mode', 'show' )]"
										onclick = "[GetVariableSystem.Toggle( 'martial_window_visible' )]"

										tooltip = "CULTURE_CLICK_TO_REPLACE"
									}

									expand = {}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[And(CultureReformation.IsReformingSamePillarTypeAs(Culture.GetMartial), Not(GetVariableSystem.HasValue( 'reformation_mode', 'show' )))]"

									margin_top = 3

									DI_progressbar_reform = {

										blockoverride "DI_progressbar_reform_size"
										{
											size = { 150 14 }
										}

										tooltipwidget = {
											using = culture_pillar_tooltip_establishing
										}
									}

									expand = {}
								}
							}
						}
					}
				}

				widget = {
					name = "cultural_pillars_collumn_two"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox = {
						margin_left = 10

						hbox = {
							name = "language"
							datacontext = "[Culture.GetLanguage]"
							layoutpolicy_horizontal = expanding

							hbox = {
								spacing = 10

								tooltipwidget = {
									using = culture_pillar_tooltip
								}

								icon_culture_pillar = {
									visible = "[ObjectsEqual( Culture.GetLanguage, GetPlayer.GetCulture.GetLanguage )]"
									texture = "gfx/interface/icons/culture_pillars/language.dds"
								}

								icon_culture_pillar = {
									visible = "[Not( ObjectsEqual( Culture.GetLanguage, GetPlayer.GetCulture.GetLanguage ))]"
									texture = "gfx/interface/icons/culture_pillars/language_diverge.dds"
								}

								text_multi = {
									datacontext = "[Culture.GetLanguage]"
									text = "CULTURE_VIEW_LANGUAGE_TEXT"
									autoresize = yes
									max_width = 220
								}

								button_adopt_court_language = {
									datacontext = "[GetPlayer]"
									layoutpolicy_horizontal = expanding

									onclick = "[ToggleGameViewData( 'language', CulturePillar.Self )]"
									enabled = "[Character.CanAdoptCourtLanguage( CulturePillar.Self )]"
									tooltip = "ADOPT_COURT_LANGUAGE_CULTURE_WINDOW"
									visible = "[And( HasDlcFeature( 'royal_court' ), And( Character.HasRoyalCourt, Not( ObjectsEqual( CulturePillar.Self, Character.GetCourtLanguage ) ) ) )]"
								}
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								spacing = 10

								tooltip = "CULTURE_AESTHETICS_TOOLTIP"

								icon_culture_pillar = {
									texture = "gfx/interface/icons/culture_pillars/aesthetics.dds"
								}

								text_multi = {
									text = "CULTURE_AESTHETICS"
									autoresize = yes
									max_width = 220
								}
							}

							expand = {}
						}
					}
				}
			}

			text_label_left = {
				layoutpolicy_horizontal = expanding
				margin = { 10 6 }
				text = "[traditions|E]"
				align = nobaseline

				text_single = {
					parentanchor = vcenter|right
					position = {-14 0}
					text = "[GetDataModelSize(Culture.GetTraditions)]/[Culture.GetMaxNumberOfTraditions]"
					tooltip = "[Culture.GetMaxNumberOfTraditionsBreakdown]"
					default_format = "#low"
					align = nobaseline
				}
			}

			scrollbox = {
				name = "traditions_holder"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				scrollbarpolicy_horizontal = always_off

				blockoverride "scrollbox_content" {
					vbox = {
						fixedgridbox = {
							datamodel = "[Culture.GetTraditions]"
							visible = "[GetVariableSystem.HasValue( 'reformation_mode', 'hide' )]"
							flipdirection = yes
							addcolumn = 284
							addrow = 180
							datamodel_wrap = 2

							item = {
								container = {
									widget = {
										name = "exisiting_tradition"
										datacontext = "[GuiCultureTradition.GetTradition]"
										visible = "[Not(GuiCultureTradition.IsEmpty)]"
										size = { 276 168 }

										tooltipwidget = {
											using = culture_tradition_tooltip
										}

										DI_widget_tradition_icon = {
											visible = "[Not(GuiCultureTradition.IsEmpty)]"

											block "icon_size" {
												size = { 276 138 }
											}
										}

										text_label_center = {
											name = "name_replacing"
											visible = "[Not(GuiCultureTradition.IsEmpty)]"
											parentanchor = bottom|hcenter
											text = "[CultureTradition.GetNameNoTooltip]"
											using = Font_Size_Medium
											multiline = yes
											align = center
										}
									}													
								}
							}
						}

						fixedgridbox = {
							datamodel = "[Culture.GetTraditions]"
							visible = "[GetVariableSystem.HasValue( 'reformation_mode', 'show' )]"
							flipdirection = yes
							addcolumn = 284
							addrow = 180
							datamodel_wrap = 2

							item = {
								widget = {
									name = "traditions"
									datacontext = "[GuiCultureTradition.GetTradition]"
									size = { 276 168 }

									tooltip_enabled = "[Not(GuiCultureTradition.IsEmpty)]"

									tooltipwidget = {
										using = culture_tradition_tooltip
									}

									DI_widget_tradition_icon = {
										visible = "[Not(GuiCultureTradition.IsEmpty)]"
										block "icon_size" {
											size = { 276 138 }
										}
									}

									DI_widget_tradition_selectable_glow = {
										visible = "[Or(Not(GuiCultureTradition.IsEmpty), GuiCultureTradition.IsNextAvailable)]"
										block "icon_size" {
											size = { 276 138 }
										}
									}

									DI_widget_tradition_empty = {
										visible = "[GuiCultureTradition.IsEmpty]"
										block "icon_size" {
											size = { 276 138 }
										}
									}

									text_label_center = {
										name = "name"
										visible = "[Not(GuiCultureTradition.IsEmpty)]"
										parentanchor = bottom|hcenter
										maximumsize = { 220 44 }
										text = "[CultureTradition.GetNameNoTooltip]"
										using = Font_Size_Medium
										multiline = yes
										align = center
										elide = right
									}
								}
							}
						}
					}
				}
			}

			expand = {}

			vbox = {
				visible = "[GetVariableSystem.HasValue( 'reformation_mode', 'hide' )]"
				layoutpolicy_horizontal = expanding
				margin_top = 15
				spacing = 10

				hbox = {
					visible = "[And( And( HasDlcFeature( 'hybridize_culture' ), Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) ) ), GetPlayer.IsValid )]"

					text_multi = {
						name = "no_hybridize_parent"
						visible = "[GetPlayer.GetCulture.IsChildOf( Culture.Self )]"
						max_width = 580
						autoresize = yes
						text = "NO_HYBRIDIZE_INFO_PARENT"
						align = nobaseline
						default_format = "#weak"
						margin_top = 6
						margin_bottom = 6
					}

					text_multi = {
						name = "no_hybridize_child"
						visible = "[Culture.IsChildOf( GetPlayer.GetCulture )]"
						max_width = 580
						autoresize = yes
						text = "NO_HYBRIDIZE_INFO_CHILD"
						align = nobaseline
						default_format = "#weak"
						margin_top = 6
						margin_bottom = 6
					}

					text_multi = {
						name = "no_hybridize_heritage"
						visible = "[And( ObjectsEqual(Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage ), And( Not( GetPlayer.GetCulture.IsChildOf( Culture.Self ) ), Not( Culture.IsChildOf( GetPlayer.GetCulture ) ) ) )]"
						max_width = 580
						autoresize = yes
						text = "NO_HYBRIDIZE_INFO_HERITAGE"
						align = nobaseline
						default_format = "#weak"
						margin_top = 6
						margin_bottom = 6
					}

					button_standard = {
						name = "hybridize"
						visible = "[And( Not( ObjectsEqual(Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage ) ), And( Not( GetPlayer.GetCulture.IsChildOf( Culture.Self ) ), Not( Culture.IsChildOf( GetPlayer.GetCulture ) ) ) )]"
						onclick = "[Culture.OpenHybridizationWindow]"
						text = "HYBRIDIZE_CULTURE_LABEL"
						tooltip = "HYBRIDIZE_CULTURE_TOOLTIP"
						using = tooltip_nw
					}
				}

				hbox = {
					spacing = 15
					button_standard = {
						name = "DI_edit_tradition"
						text = DI_edit_tradition
						onclick = "[GetVariableSystem.Toggle( 'DI_tradition_editor_window_visible')]"
						down = "[IsGameViewOpen('add_culture_tradition')]"
						tooltip = "ADD_TRADITION_TOOLTIP"
						using = tooltip_nw
					}
	
					button_standard = {
						name = "DI_reform_culture"
						visible = "[And(And(ObjectsEqual(Culture.GetCultureHead.Self, GetPlayer ), HasDlcFeature( 'reform_culture' )), GetPlayer.IsValid)]"
						enabled = "[Not(Culture.IsReforming)]"
						text = "REFORM_CULTURE_LABEL"
						onclick = "[GetVariableSystem.Set( 'reformation_mode', 'show' )]"
						down = "[IsGameViewOpen('add_culture_tradition')]"
						tooltip = "REFORM_CULTURE_TOOLTIP"
						using = tooltip_nw
	
					}

					button_standard = {
						name = "DI_diverge_culture"
						visible = "[And( ObjectsEqual(Culture.Self, GetPlayer.GetCulture ), HasDlcFeature( 'diverge_culture' ) )]"
						onclick = "[Culture.OpenDivergenceWindow]"
						text = "DIVERGE_CULTURE_LABEL"
						tooltip = "DIVERGE_CULTURE_TOOLTIP"
						using = tooltip_nw
					}
				}

				hbox = {
					spacing = 15
					button_standard = {
						name = "DI_copy_traditions"
						onclick = "[GetScriptedGui('DI_copy_traditions').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						text = DI_COPY_TRADITIONS_LABEL
						tooltip = DI_copy_traditions_tt
						using = tooltip_nw
					}
				}
			}

			hbox = {
				visible = "[GetVariableSystem.HasValue( 'reformation_mode', 'show' )]"
				layoutpolicy_horizontal = expanding
				margin = { 10 8 }
				margin_top = 8

				button_standard = {
					name = "cancel_reform_culture"
					text = "REFORM_CULTURE_CLOSE_LABEL"
					onclick = "[GetVariableSystem.Set( 'reformation_mode', 'hide' )]"
					down = "[IsGameViewOpen('add_culture_tradition')]"
					tooltip = "REFORM_CULTURE_CLOSE_TOOLTIP"
					using = tooltip_nw
				}
			}
		}

		vbox = {
			name = "innovations_area"
			visible = "[And(GetVariableSystem.HasValue( 'culture_view_tabs', 'innovations' ), GetPlayer.MakeScope.Var('DI_innovation_selected_char').Char.IsValid)]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = Animation_Tab_Switch

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 10 }

				text_label_center = {
					text = "CULTURE_WINDOW_INNOVATIONS"
					using = Font_Size_Medium
				}
			}

			vbox = {
				using = DI_Innovation_Eras_Vanilla
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
			
				blockoverride "scrollbox_content"
				{
			
					vbox = {
					
						vbox = {
							layoutpolicy_horizontal = expanding
							datacontext = "[GetPlayer.MakeScope.Var('DI_innovation_selected_culture').Culture]"
						
							using = DI_Military_Group
							
							using = DI_Innovation_Military_Vanilla
							
							using = DI_Civic_Group
							
							using = DI_Innovation_Civic_Vanilla
							
							using = DI_Regional_Group
							
							using = DI_Innovation_Regional_Vanilla
						}
					}
					
				}
			}
		}
    }
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types CulturalEditorShared
{
	type DI_container_pillar_item = container {
		using = tooltip_ws

		tooltipwidget = {
			using = culture_pillar_tooltip
		}

		highlight_icon = {
			name = "icon"
			size = { 592 130 }
			texture = "[CulturePillar.GetIcon]"
			using = Mask_Rough_Edges
		}

		widget = {
			size = { 100% 100% }

			vbox = {
				margin_bottom = 5
				expand = {}

				text_label_center = {
					name = "name"
					text = "[CulturePillar.GetNameNoTooltip]"
					default_format = "#high"
					maximumsize = { 130 44 }
					fontsize_min = 12
					multiline = yes
					align = center

					using = Font_Size_Medium
				}

				spacer = {
					size = { 0 5 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					visible = "[And(CultureReformation.IsReformingSamePillarTypeAs(Culture.GetEthos), GetVariableSystem.HasValue( 'reformation_mode', 'show' ))]"

					background = {
						using = Background_Area_Dark
						margin = { 0 5 }
					}

					tooltipwidget = {
						using = culture_pillar_tooltip_establishing
					}

					expand = {}

					text_single = {
						text = "REFORM_ETHOS_NEW_NAME"
						align = nobaseline
					}

					text_single = {
						text = "REFORMATION_NEW_TRADITION_INFO"
						align = nobaseline
					}

					DI_progressbar_reform = {

						blockoverride "DI_progressbar_reform_size"
						{
							size = { 200 14 }
						}
					}

					expand = {}
				}
			}
		}
	}

	type DI_widget_tradition_icon = widget
	{

		icon = {
			name = "background"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)0' )]"
			size = { 100% 100% }
		}

		icon = {
			name = "pattern_left"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)1' )]"
			size = { 100% 100% }
			parentanchor = hcenter
		}

		icon = {
			name = "pattern_right"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)1' )]"
			size = { 100% 100% }
			parentanchor = hcenter
			mirror = horizontal
		}

		icon = {
			name = "support"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)2' )]"
			size = { 100% 100% }
		}

		icon = {
			name = "stroke"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)3' )]"
			size = { 90% 90% }
			parentanchor = center
		}

		icon = {
			name = "items"
			texture = "[CultureTradition.GetLayeredIcon.GetTexture( '(int32)4' )]"
			size = { 100% 100% }
			parentanchor = center
		}
	}

	type DI_widget_tradition_selectable_glow = widget
	{

		size = { 276 138 }

		button_standard_clean = {
			onclick = "[Culture.OpenReplaceTraditionWindow(CultureTradition.Self)]"
			size = { 276 138 }

			icon = {
				texture = "gfx/interface/icons/flat_icons/circle.dds"
				parentanchor = bottom|right
				size = { 45 45 }
				position = { -1 2 }
				alpha = 0.6

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_circle.dds"
					blend_mode = alphamultiply
				}
			}

			button_replace = {
				visible = "[Not(GuiCultureTradition.IsEmpty)]"
				onclick = "[Culture.OpenReplaceTraditionWindow(CultureTradition.Self)]"
				parentanchor = bottom|right
				size = { 35 35 }
				position = { -5 -2 }

			}
		}
	}

	type DI_widget_tradition_empty = widget
	{

		icon = {
			name = "background"
			texture = "gfx/interface/colors/black.dds"
			alpha = 0.3
			size = { 100% 100% }
			parentanchor = center

			using = Mask_Rough_Edges
		}
	}

	type DI_progressbar_reform = progressbar_standard
	{
		block "DI_progressbar_reform_size" {}

		min = 0
		max = 100
		value = "[CultureReformation.GetProgress]"
	}

	type DI_button_replace_culture = button_normal
	{
		size = { 35 35 }

		icon = {
			texture = "gfx/interface/buttons/button_lifestyles_base.dds"
			size = { 100% 100% }
		}

		icon = {
			name = "progress_frame"
			texture = "gfx/interface/progressbars/action_progress_frame.dds"
			size = { 100% 100% }
			alpha = 0.5
		}

		button_icon_highlight = {
			block "highlight_icon_size"
			{
				size = { 25 25 }
			}
			parentanchor = center
			texture = "gfx/interface/icons/flat_icons/replace.dds"
		}
	}
}